{"ast":null,"code":"import _regeneratorRuntime from\"/home/hajira/Documents/fiver/loginwithfirebase/reactboiler/nodeserver/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/hajira/Documents/fiver/loginwithfirebase/reactboiler/nodeserver/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{getApiUrI}from'../../config';export var getService=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(getApiUrI).then(function(response){return response.json();}).then(function(data){dispatch({type:'GET_DATA',payload:data});}).catch(function(err){dispatch({type:'SET_ERROR',errors:err});}).finally(function(){dispatch({type:'SET_LOADER',loader:false});});case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},_callee);}));return function getService(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/hajira/Documents/fiver/loginwithfirebase/reactboiler/nodeserver/client/src/context/services/get.tsx"],"names":["getApiUrI","getService","dispatch","fetch","then","response","json","data","type","payload","catch","err","errors","finally","loader"],"mappings":"2TAAA,OAASA,SAAT,KAA0B,cAA1B,CACA,MAAO,IAAMC,CAAAA,UAAU,0FAAE,iBAAgBC,QAAhB,wIACRC,CAAAA,KAAK,CAACH,SAAD,CAAL,CACRI,IADQ,CACH,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADL,EAERF,IAFQ,CAEH,SAAAG,IAAI,CAAG,CACTL,QAAQ,CAAC,CACLM,IAAI,CAAE,UADD,CAELC,OAAO,CAAEF,IAFJ,CAAD,CAAR,CAIH,CAPQ,EAQRG,KARQ,CAQF,SAACC,GAAD,CAAS,CACZT,QAAQ,CAAC,CACLM,IAAI,CAAE,WADD,CAELI,MAAM,CAAED,GAFH,CAAD,CAAR,CAIH,CAbQ,EAcRE,OAdQ,CAcA,UAAM,CACXX,QAAQ,CAAC,CACLM,IAAI,CAAE,YADD,CAELM,MAAM,CAAE,KAFH,CAAD,CAAR,CAIH,CAnBQ,CADQ,6GAAF,kBAAVb,CAAAA,UAAU,4CAAhB","sourcesContent":["import { getApiUrI } from '../../config';\nexport const getService =async function (dispatch:any) {\n    return await fetch(getApiUrI)\n        .then(response => response.json())\n        .then(data =>{\n            dispatch({\n                type: 'GET_DATA',\n                payload: data,\n            })\n        })\n        .catch((err) => {\n            dispatch({\n                type: 'SET_ERROR',\n                errors: err,\n            })\n        })\n        .finally(() => {\n            dispatch({\n                type: 'SET_LOADER',\n                loader: false,\n            })\n        })\n\n};"]},"metadata":{},"sourceType":"module"}